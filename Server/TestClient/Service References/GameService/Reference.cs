//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace TestClient.GameService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public partial struct Card : System.ComponentModel.INotifyPropertyChanged {
        
        private TestClient.GameService.Suit Suitk__BackingFieldField;
        
        private int Valuek__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Suit>k__BackingField", IsRequired=true)]
        public TestClient.GameService.Suit Suitk__BackingField {
            get {
                return this.Suitk__BackingFieldField;
            }
            set {
                if ((this.Suitk__BackingFieldField.Equals(value) != true)) {
                    this.Suitk__BackingFieldField = value;
                    this.RaisePropertyChanged("Suitk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Value>k__BackingField", IsRequired=true)]
        public int Valuek__BackingField {
            get {
                return this.Valuek__BackingFieldField;
            }
            set {
                if ((this.Valuek__BackingFieldField.Equals(value) != true)) {
                    this.Valuek__BackingFieldField = value;
                    this.RaisePropertyChanged("Valuek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Suit", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public enum Suit : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Clubs = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Diamonds = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hearts = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Spades = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bid", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public partial struct Bid : System.ComponentModel.INotifyPropertyChanged {
        
        private int Amountk__BackingFieldField;
        
        private System.Nullable<TestClient.GameService.Suit> Suitk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Amount>k__BackingField", IsRequired=true)]
        public int Amountk__BackingField {
            get {
                return this.Amountk__BackingFieldField;
            }
            set {
                if ((this.Amountk__BackingFieldField.Equals(value) != true)) {
                    this.Amountk__BackingFieldField = value;
                    this.RaisePropertyChanged("Amountk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Suit>k__BackingField", IsRequired=true)]
        public System.Nullable<TestClient.GameService.Suit> Suitk__BackingField {
            get {
                return this.Suitk__BackingFieldField;
            }
            set {
                if ((this.Suitk__BackingFieldField.Equals(value) != true)) {
                    this.Suitk__BackingFieldField = value;
                    this.RaisePropertyChanged("Suitk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerPlugin", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public partial class PlayerPlugin : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IDField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoundStatus", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public partial class RoundStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<System.Nullable<TestClient.GameService.Bid>> Biddingsk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<System.Nullable<TestClient.GameService.Card>> CurrentPlayk__BackingFieldField;
        
        private TestClient.GameService.PlayerSeat LeadingPlayerk__BackingFieldField;
        
        private TestClient.GameService.PlayerSeat PlayerTurnk__BackingFieldField;
        
        private TestClient.GameService.RoundState Statek__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<int> TricksTakenk__BackingFieldField;
        
        private System.Nullable<TestClient.GameService.Suit> Trumpk__BackingFieldField;
        
        private int TurnNumberk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Biddings>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<System.Nullable<TestClient.GameService.Bid>> Biddingsk__BackingField {
            get {
                return this.Biddingsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Biddingsk__BackingFieldField, value) != true)) {
                    this.Biddingsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Biddingsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CurrentPlay>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<System.Nullable<TestClient.GameService.Card>> CurrentPlayk__BackingField {
            get {
                return this.CurrentPlayk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentPlayk__BackingFieldField, value) != true)) {
                    this.CurrentPlayk__BackingFieldField = value;
                    this.RaisePropertyChanged("CurrentPlayk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<LeadingPlayer>k__BackingField", IsRequired=true)]
        public TestClient.GameService.PlayerSeat LeadingPlayerk__BackingField {
            get {
                return this.LeadingPlayerk__BackingFieldField;
            }
            set {
                if ((this.LeadingPlayerk__BackingFieldField.Equals(value) != true)) {
                    this.LeadingPlayerk__BackingFieldField = value;
                    this.RaisePropertyChanged("LeadingPlayerk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PlayerTurn>k__BackingField", IsRequired=true)]
        public TestClient.GameService.PlayerSeat PlayerTurnk__BackingField {
            get {
                return this.PlayerTurnk__BackingFieldField;
            }
            set {
                if ((this.PlayerTurnk__BackingFieldField.Equals(value) != true)) {
                    this.PlayerTurnk__BackingFieldField = value;
                    this.RaisePropertyChanged("PlayerTurnk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<State>k__BackingField", IsRequired=true)]
        public TestClient.GameService.RoundState Statek__BackingField {
            get {
                return this.Statek__BackingFieldField;
            }
            set {
                if ((this.Statek__BackingFieldField.Equals(value) != true)) {
                    this.Statek__BackingFieldField = value;
                    this.RaisePropertyChanged("Statek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TricksTaken>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<int> TricksTakenk__BackingField {
            get {
                return this.TricksTakenk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.TricksTakenk__BackingFieldField, value) != true)) {
                    this.TricksTakenk__BackingFieldField = value;
                    this.RaisePropertyChanged("TricksTakenk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Trump>k__BackingField", IsRequired=true)]
        public System.Nullable<TestClient.GameService.Suit> Trumpk__BackingField {
            get {
                return this.Trumpk__BackingFieldField;
            }
            set {
                if ((this.Trumpk__BackingFieldField.Equals(value) != true)) {
                    this.Trumpk__BackingFieldField = value;
                    this.RaisePropertyChanged("Trumpk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TurnNumber>k__BackingField", IsRequired=true)]
        public int TurnNumberk__BackingField {
            get {
                return this.TurnNumberk__BackingFieldField;
            }
            set {
                if ((this.TurnNumberk__BackingFieldField.Equals(value) != true)) {
                    this.TurnNumberk__BackingFieldField = value;
                    this.RaisePropertyChanged("TurnNumberk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerSeat", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public enum PlayerSeat : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Self = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        West = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        North = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        East = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoundState", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public enum RoundState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bidding = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contract = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Playing = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TurnResults = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameStatus", Namespace="http://schemas.datacontract.org/2004/07/Server.API")]
    public partial class GameStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<string> PlayerNamesk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> PlayerTypesk__BackingFieldField;
        
        private int RoundNumberk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<int> Scoresk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PlayerNames>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<string> PlayerNamesk__BackingField {
            get {
                return this.PlayerNamesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNamesk__BackingFieldField, value) != true)) {
                    this.PlayerNamesk__BackingFieldField = value;
                    this.RaisePropertyChanged("PlayerNamesk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PlayerTypes>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<string> PlayerTypesk__BackingField {
            get {
                return this.PlayerTypesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerTypesk__BackingFieldField, value) != true)) {
                    this.PlayerTypesk__BackingFieldField = value;
                    this.RaisePropertyChanged("PlayerTypesk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<RoundNumber>k__BackingField", IsRequired=true)]
        public int RoundNumberk__BackingField {
            get {
                return this.RoundNumberk__BackingFieldField;
            }
            set {
                if ((this.RoundNumberk__BackingFieldField.Equals(value) != true)) {
                    this.RoundNumberk__BackingFieldField = value;
                    this.RaisePropertyChanged("RoundNumberk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Scores>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<int> Scoresk__BackingField {
            get {
                return this.Scoresk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Scoresk__BackingFieldField, value) != true)) {
                    this.Scoresk__BackingFieldField = value;
                    this.RaisePropertyChanged("Scoresk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Silverlight", ConfigurationName="GameService.IPlayerService", CallbackContract=typeof(TestClient.GameService.IPlayerServiceCallback))]
    public interface IPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/Register", ReplyAction="Silverlight/IPlayerService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string name, string game_name, System.AsyncCallback callback, object asyncState);
        
        void EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/StartGame", ReplyAction="Silverlight/IPlayerService/StartGameResponse")]
        System.IAsyncResult BeginStartGame(string name, int number_Of_AIPlayers, System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, string game_name, System.AsyncCallback callback, object asyncState);
        
        void EndStartGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/StartGameView", ReplyAction="Silverlight/IPlayerService/StartGameViewResponse")]
        System.IAsyncResult BeginStartGameView(System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, System.AsyncCallback callback, object asyncState);
        
        void EndStartGameView(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/RequestUpdate", ReplyAction="Silverlight/IPlayerService/RequestUpdateResponse")]
        System.IAsyncResult BeginRequestUpdate(System.AsyncCallback callback, object asyncState);
        
        void EndRequestUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/SwitchCards", ReplyAction="Silverlight/IPlayerService/SwitchCardsResponse")]
        System.IAsyncResult BeginSwitchCards(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchCards(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/MakeBid", ReplyAction="Silverlight/IPlayerService/MakeBidResponse")]
        System.IAsyncResult BeginMakeBid(System.Nullable<TestClient.GameService.Bid> bid, System.AsyncCallback callback, object asyncState);
        
        void EndMakeBid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/MakeContract", ReplyAction="Silverlight/IPlayerService/MakeContractResponse")]
        System.IAsyncResult BeginMakeContract(int amount, System.AsyncCallback callback, object asyncState);
        
        void EndMakeContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/PlayCard", ReplyAction="Silverlight/IPlayerService/PlayCardResponse")]
        System.IAsyncResult BeginPlayCard(TestClient.GameService.Card play, System.AsyncCallback callback, object asyncState);
        
        void EndPlayCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/GetPlayerPlugIns", ReplyAction="Silverlight/IPlayerService/GetPlayerPlugInsResponse")]
        System.IAsyncResult BeginGetPlayerPlugIns(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin> EndGetPlayerPlugIns(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/FinishGame", ReplyAction="Silverlight/IPlayerService/FinishGameResponse")]
        System.IAsyncResult BeginFinishGame(System.AsyncCallback callback, object asyncState);
        
        void EndFinishGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IPlayerService/SendChatMessage", ReplyAction="Silverlight/IPlayerService/SendChatMessageResponse")]
        System.IAsyncResult BeginSendChatMessage(string msg, System.AsyncCallback callback, object asyncState);
        
        void EndSendChatMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveRoundStatusUpdate")]
        void RecieveRoundStatusUpdate(TestClient.GameService.RoundStatus status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveGameStatusUpdate")]
        void RecieveGameStatusUpdate(TestClient.GameService.GameStatus status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveCards")]
        void RecieveCards(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveExchangedCards")]
        void RecieveExchangedCards(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RequestExchangeCards")]
        void RequestExchangeCards();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RequestBid")]
        void RequestBid();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/ReqeustContract")]
        void ReqeustContract();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RequestPlay")]
        void RequestPlay();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveStatusCards")]
        void RecieveStatusCards(TestClient.GameService.RoundStatus status, System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card>> allCards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveErrorMessage")]
        void RecieveErrorMessage(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveGameOver")]
        void RecieveGameOver();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IPlayerService/RecieveChatMessage")]
        void RecieveChatMessage(TestClient.GameService.PlayerSeat sender, string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceChannel : TestClient.GameService.IPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPlayerPlugInsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlayerPlugInsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServiceClient : System.ServiceModel.DuplexClientBase<TestClient.GameService.IPlayerService>, TestClient.GameService.IPlayerService {
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartGameDelegate;
        
        private EndOperationDelegate onEndStartGameDelegate;
        
        private System.Threading.SendOrPostCallback onStartGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartGameViewDelegate;
        
        private EndOperationDelegate onEndStartGameViewDelegate;
        
        private System.Threading.SendOrPostCallback onStartGameViewCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestUpdateDelegate;
        
        private EndOperationDelegate onEndRequestUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onRequestUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchCardsDelegate;
        
        private EndOperationDelegate onEndSwitchCardsDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchCardsCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeBidDelegate;
        
        private EndOperationDelegate onEndMakeBidDelegate;
        
        private System.Threading.SendOrPostCallback onMakeBidCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeContractDelegate;
        
        private EndOperationDelegate onEndMakeContractDelegate;
        
        private System.Threading.SendOrPostCallback onMakeContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayCardDelegate;
        
        private EndOperationDelegate onEndPlayCardDelegate;
        
        private System.Threading.SendOrPostCallback onPlayCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlayerPlugInsDelegate;
        
        private EndOperationDelegate onEndGetPlayerPlugInsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlayerPlugInsCompletedDelegate;
        
        private BeginOperationDelegate onBeginFinishGameDelegate;
        
        private EndOperationDelegate onEndFinishGameDelegate;
        
        private System.Threading.SendOrPostCallback onFinishGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendChatMessageDelegate;
        
        private EndOperationDelegate onEndSendChatMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendChatMessageCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new PlayerServiceClientCallback(), binding, remoteAddress) {
        }
        
        private PlayerServiceClient(PlayerServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartGameViewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RequestUpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchCardsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MakeBidCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MakeContractCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PlayCardCompleted;
        
        public event System.EventHandler<GetPlayerPlugInsCompletedEventArgs> GetPlayerPlugInsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FinishGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendChatMessageCompleted;
        
        public event System.EventHandler<RecieveRoundStatusUpdateReceivedEventArgs> RecieveRoundStatusUpdateReceived;
        
        public event System.EventHandler<RecieveGameStatusUpdateReceivedEventArgs> RecieveGameStatusUpdateReceived;
        
        public event System.EventHandler<RecieveCardsReceivedEventArgs> RecieveCardsReceived;
        
        public event System.EventHandler<RecieveExchangedCardsReceivedEventArgs> RecieveExchangedCardsReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RequestExchangeCardsReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RequestBidReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReqeustContractReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RequestPlayReceived;
        
        public event System.EventHandler<RecieveStatusCardsReceivedEventArgs> RecieveStatusCardsReceived;
        
        public event System.EventHandler<RecieveErrorMessageReceivedEventArgs> RecieveErrorMessageReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RecieveGameOverReceived;
        
        public event System.EventHandler<RecieveChatMessageReceivedEventArgs> RecieveChatMessageReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginRegister(string name, string game_name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(name, game_name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndRegister(System.IAsyncResult result) {
            base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string game_name = ((string)(inValues[1]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginRegister(name, game_name, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndRegister(result);
            return null;
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string name, string game_name) {
            this.RegisterAsync(name, game_name, null);
        }
        
        public void RegisterAsync(string name, string game_name, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        name,
                        game_name}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginStartGame(string name, int number_Of_AIPlayers, System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, string game_name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartGame(name, number_Of_AIPlayers, player_AI, num_of_rounds, milliseconds_between_turns, game_name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndStartGame(System.IAsyncResult result) {
            base.Channel.EndStartGame(result);
        }
        
        private System.IAsyncResult OnBeginStartGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            int number_Of_AIPlayers = ((int)(inValues[1]));
            System.Collections.ObjectModel.ObservableCollection<string> player_AI = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[2]));
            int num_of_rounds = ((int)(inValues[3]));
            int milliseconds_between_turns = ((int)(inValues[4]));
            string game_name = ((string)(inValues[5]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginStartGame(name, number_Of_AIPlayers, player_AI, num_of_rounds, milliseconds_between_turns, game_name, callback, asyncState);
        }
        
        private object[] OnEndStartGame(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndStartGame(result);
            return null;
        }
        
        private void OnStartGameCompleted(object state) {
            if ((this.StartGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartGameAsync(string name, int number_Of_AIPlayers, System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, string game_name) {
            this.StartGameAsync(name, number_Of_AIPlayers, player_AI, num_of_rounds, milliseconds_between_turns, game_name, null);
        }
        
        public void StartGameAsync(string name, int number_Of_AIPlayers, System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, string game_name, object userState) {
            if ((this.onBeginStartGameDelegate == null)) {
                this.onBeginStartGameDelegate = new BeginOperationDelegate(this.OnBeginStartGame);
            }
            if ((this.onEndStartGameDelegate == null)) {
                this.onEndStartGameDelegate = new EndOperationDelegate(this.OnEndStartGame);
            }
            if ((this.onStartGameCompletedDelegate == null)) {
                this.onStartGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartGameCompleted);
            }
            base.InvokeAsync(this.onBeginStartGameDelegate, new object[] {
                        name,
                        number_Of_AIPlayers,
                        player_AI,
                        num_of_rounds,
                        milliseconds_between_turns,
                        game_name}, this.onEndStartGameDelegate, this.onStartGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginStartGameView(System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartGameView(player_AI, num_of_rounds, milliseconds_between_turns, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndStartGameView(System.IAsyncResult result) {
            base.Channel.EndStartGameView(result);
        }
        
        private System.IAsyncResult OnBeginStartGameView(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> player_AI = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            int num_of_rounds = ((int)(inValues[1]));
            int milliseconds_between_turns = ((int)(inValues[2]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginStartGameView(player_AI, num_of_rounds, milliseconds_between_turns, callback, asyncState);
        }
        
        private object[] OnEndStartGameView(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndStartGameView(result);
            return null;
        }
        
        private void OnStartGameViewCompleted(object state) {
            if ((this.StartGameViewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartGameViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartGameViewAsync(System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns) {
            this.StartGameViewAsync(player_AI, num_of_rounds, milliseconds_between_turns, null);
        }
        
        public void StartGameViewAsync(System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, object userState) {
            if ((this.onBeginStartGameViewDelegate == null)) {
                this.onBeginStartGameViewDelegate = new BeginOperationDelegate(this.OnBeginStartGameView);
            }
            if ((this.onEndStartGameViewDelegate == null)) {
                this.onEndStartGameViewDelegate = new EndOperationDelegate(this.OnEndStartGameView);
            }
            if ((this.onStartGameViewCompletedDelegate == null)) {
                this.onStartGameViewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartGameViewCompleted);
            }
            base.InvokeAsync(this.onBeginStartGameViewDelegate, new object[] {
                        player_AI,
                        num_of_rounds,
                        milliseconds_between_turns}, this.onEndStartGameViewDelegate, this.onStartGameViewCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginRequestUpdate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestUpdate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndRequestUpdate(System.IAsyncResult result) {
            base.Channel.EndRequestUpdate(result);
        }
        
        private System.IAsyncResult OnBeginRequestUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TestClient.GameService.IPlayerService)(this)).BeginRequestUpdate(callback, asyncState);
        }
        
        private object[] OnEndRequestUpdate(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndRequestUpdate(result);
            return null;
        }
        
        private void OnRequestUpdateCompleted(object state) {
            if ((this.RequestUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestUpdateAsync() {
            this.RequestUpdateAsync(null);
        }
        
        public void RequestUpdateAsync(object userState) {
            if ((this.onBeginRequestUpdateDelegate == null)) {
                this.onBeginRequestUpdateDelegate = new BeginOperationDelegate(this.OnBeginRequestUpdate);
            }
            if ((this.onEndRequestUpdateDelegate == null)) {
                this.onEndRequestUpdateDelegate = new EndOperationDelegate(this.OnEndRequestUpdate);
            }
            if ((this.onRequestUpdateCompletedDelegate == null)) {
                this.onRequestUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginRequestUpdateDelegate, null, this.onEndRequestUpdateDelegate, this.onRequestUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginSwitchCards(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchCards(cards, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndSwitchCards(System.IAsyncResult result) {
            base.Channel.EndSwitchCards(result);
        }
        
        private System.IAsyncResult OnBeginSwitchCards(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards = ((System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card>)(inValues[0]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginSwitchCards(cards, callback, asyncState);
        }
        
        private object[] OnEndSwitchCards(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndSwitchCards(result);
            return null;
        }
        
        private void OnSwitchCardsCompleted(object state) {
            if ((this.SwitchCardsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchCardsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchCardsAsync(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards) {
            this.SwitchCardsAsync(cards, null);
        }
        
        public void SwitchCardsAsync(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards, object userState) {
            if ((this.onBeginSwitchCardsDelegate == null)) {
                this.onBeginSwitchCardsDelegate = new BeginOperationDelegate(this.OnBeginSwitchCards);
            }
            if ((this.onEndSwitchCardsDelegate == null)) {
                this.onEndSwitchCardsDelegate = new EndOperationDelegate(this.OnEndSwitchCards);
            }
            if ((this.onSwitchCardsCompletedDelegate == null)) {
                this.onSwitchCardsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchCardsCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchCardsDelegate, new object[] {
                        cards}, this.onEndSwitchCardsDelegate, this.onSwitchCardsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginMakeBid(System.Nullable<TestClient.GameService.Bid> bid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeBid(bid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndMakeBid(System.IAsyncResult result) {
            base.Channel.EndMakeBid(result);
        }
        
        private System.IAsyncResult OnBeginMakeBid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<TestClient.GameService.Bid> bid = ((System.Nullable<TestClient.GameService.Bid>)(inValues[0]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginMakeBid(bid, callback, asyncState);
        }
        
        private object[] OnEndMakeBid(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndMakeBid(result);
            return null;
        }
        
        private void OnMakeBidCompleted(object state) {
            if ((this.MakeBidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeBidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeBidAsync(System.Nullable<TestClient.GameService.Bid> bid) {
            this.MakeBidAsync(bid, null);
        }
        
        public void MakeBidAsync(System.Nullable<TestClient.GameService.Bid> bid, object userState) {
            if ((this.onBeginMakeBidDelegate == null)) {
                this.onBeginMakeBidDelegate = new BeginOperationDelegate(this.OnBeginMakeBid);
            }
            if ((this.onEndMakeBidDelegate == null)) {
                this.onEndMakeBidDelegate = new EndOperationDelegate(this.OnEndMakeBid);
            }
            if ((this.onMakeBidCompletedDelegate == null)) {
                this.onMakeBidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeBidCompleted);
            }
            base.InvokeAsync(this.onBeginMakeBidDelegate, new object[] {
                        bid}, this.onEndMakeBidDelegate, this.onMakeBidCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginMakeContract(int amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeContract(amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndMakeContract(System.IAsyncResult result) {
            base.Channel.EndMakeContract(result);
        }
        
        private System.IAsyncResult OnBeginMakeContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int amount = ((int)(inValues[0]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginMakeContract(amount, callback, asyncState);
        }
        
        private object[] OnEndMakeContract(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndMakeContract(result);
            return null;
        }
        
        private void OnMakeContractCompleted(object state) {
            if ((this.MakeContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeContractCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeContractAsync(int amount) {
            this.MakeContractAsync(amount, null);
        }
        
        public void MakeContractAsync(int amount, object userState) {
            if ((this.onBeginMakeContractDelegate == null)) {
                this.onBeginMakeContractDelegate = new BeginOperationDelegate(this.OnBeginMakeContract);
            }
            if ((this.onEndMakeContractDelegate == null)) {
                this.onEndMakeContractDelegate = new EndOperationDelegate(this.OnEndMakeContract);
            }
            if ((this.onMakeContractCompletedDelegate == null)) {
                this.onMakeContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeContractCompleted);
            }
            base.InvokeAsync(this.onBeginMakeContractDelegate, new object[] {
                        amount}, this.onEndMakeContractDelegate, this.onMakeContractCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginPlayCard(TestClient.GameService.Card play, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayCard(play, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndPlayCard(System.IAsyncResult result) {
            base.Channel.EndPlayCard(result);
        }
        
        private System.IAsyncResult OnBeginPlayCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TestClient.GameService.Card play = ((TestClient.GameService.Card)(inValues[0]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginPlayCard(play, callback, asyncState);
        }
        
        private object[] OnEndPlayCard(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndPlayCard(result);
            return null;
        }
        
        private void OnPlayCardCompleted(object state) {
            if ((this.PlayCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayCardCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayCardAsync(TestClient.GameService.Card play) {
            this.PlayCardAsync(play, null);
        }
        
        public void PlayCardAsync(TestClient.GameService.Card play, object userState) {
            if ((this.onBeginPlayCardDelegate == null)) {
                this.onBeginPlayCardDelegate = new BeginOperationDelegate(this.OnBeginPlayCard);
            }
            if ((this.onEndPlayCardDelegate == null)) {
                this.onEndPlayCardDelegate = new EndOperationDelegate(this.OnEndPlayCard);
            }
            if ((this.onPlayCardCompletedDelegate == null)) {
                this.onPlayCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayCardCompleted);
            }
            base.InvokeAsync(this.onBeginPlayCardDelegate, new object[] {
                        play}, this.onEndPlayCardDelegate, this.onPlayCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginGetPlayerPlugIns(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlayerPlugIns(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin> TestClient.GameService.IPlayerService.EndGetPlayerPlugIns(System.IAsyncResult result) {
            return base.Channel.EndGetPlayerPlugIns(result);
        }
        
        private System.IAsyncResult OnBeginGetPlayerPlugIns(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TestClient.GameService.IPlayerService)(this)).BeginGetPlayerPlugIns(callback, asyncState);
        }
        
        private object[] OnEndGetPlayerPlugIns(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin> retVal = ((TestClient.GameService.IPlayerService)(this)).EndGetPlayerPlugIns(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlayerPlugInsCompleted(object state) {
            if ((this.GetPlayerPlugInsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlayerPlugInsCompleted(this, new GetPlayerPlugInsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlayerPlugInsAsync() {
            this.GetPlayerPlugInsAsync(null);
        }
        
        public void GetPlayerPlugInsAsync(object userState) {
            if ((this.onBeginGetPlayerPlugInsDelegate == null)) {
                this.onBeginGetPlayerPlugInsDelegate = new BeginOperationDelegate(this.OnBeginGetPlayerPlugIns);
            }
            if ((this.onEndGetPlayerPlugInsDelegate == null)) {
                this.onEndGetPlayerPlugInsDelegate = new EndOperationDelegate(this.OnEndGetPlayerPlugIns);
            }
            if ((this.onGetPlayerPlugInsCompletedDelegate == null)) {
                this.onGetPlayerPlugInsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlayerPlugInsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlayerPlugInsDelegate, null, this.onEndGetPlayerPlugInsDelegate, this.onGetPlayerPlugInsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginFinishGame(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFinishGame(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndFinishGame(System.IAsyncResult result) {
            base.Channel.EndFinishGame(result);
        }
        
        private System.IAsyncResult OnBeginFinishGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TestClient.GameService.IPlayerService)(this)).BeginFinishGame(callback, asyncState);
        }
        
        private object[] OnEndFinishGame(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndFinishGame(result);
            return null;
        }
        
        private void OnFinishGameCompleted(object state) {
            if ((this.FinishGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FinishGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FinishGameAsync() {
            this.FinishGameAsync(null);
        }
        
        public void FinishGameAsync(object userState) {
            if ((this.onBeginFinishGameDelegate == null)) {
                this.onBeginFinishGameDelegate = new BeginOperationDelegate(this.OnBeginFinishGame);
            }
            if ((this.onEndFinishGameDelegate == null)) {
                this.onEndFinishGameDelegate = new EndOperationDelegate(this.OnEndFinishGame);
            }
            if ((this.onFinishGameCompletedDelegate == null)) {
                this.onFinishGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFinishGameCompleted);
            }
            base.InvokeAsync(this.onBeginFinishGameDelegate, null, this.onEndFinishGameDelegate, this.onFinishGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestClient.GameService.IPlayerService.BeginSendChatMessage(string msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendChatMessage(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TestClient.GameService.IPlayerService.EndSendChatMessage(System.IAsyncResult result) {
            base.Channel.EndSendChatMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendChatMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msg = ((string)(inValues[0]));
            return ((TestClient.GameService.IPlayerService)(this)).BeginSendChatMessage(msg, callback, asyncState);
        }
        
        private object[] OnEndSendChatMessage(System.IAsyncResult result) {
            ((TestClient.GameService.IPlayerService)(this)).EndSendChatMessage(result);
            return null;
        }
        
        private void OnSendChatMessageCompleted(object state) {
            if ((this.SendChatMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendChatMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendChatMessageAsync(string msg) {
            this.SendChatMessageAsync(msg, null);
        }
        
        public void SendChatMessageAsync(string msg, object userState) {
            if ((this.onBeginSendChatMessageDelegate == null)) {
                this.onBeginSendChatMessageDelegate = new BeginOperationDelegate(this.OnBeginSendChatMessage);
            }
            if ((this.onEndSendChatMessageDelegate == null)) {
                this.onEndSendChatMessageDelegate = new EndOperationDelegate(this.OnEndSendChatMessage);
            }
            if ((this.onSendChatMessageCompletedDelegate == null)) {
                this.onSendChatMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendChatMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendChatMessageDelegate, new object[] {
                        msg}, this.onEndSendChatMessageDelegate, this.onSendChatMessageCompletedDelegate, userState);
        }
        
        private void OnRecieveRoundStatusUpdateReceived(object state) {
            if ((this.RecieveRoundStatusUpdateReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveRoundStatusUpdateReceived(this, new RecieveRoundStatusUpdateReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRecieveGameStatusUpdateReceived(object state) {
            if ((this.RecieveGameStatusUpdateReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveGameStatusUpdateReceived(this, new RecieveGameStatusUpdateReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRecieveCardsReceived(object state) {
            if ((this.RecieveCardsReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveCardsReceived(this, new RecieveCardsReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRecieveExchangedCardsReceived(object state) {
            if ((this.RecieveExchangedCardsReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveExchangedCardsReceived(this, new RecieveExchangedCardsReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRequestExchangeCardsReceived(object state) {
            if ((this.RequestExchangeCardsReceived != null)) {
                object[] results = ((object[])(state));
                this.RequestExchangeCardsReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnRequestBidReceived(object state) {
            if ((this.RequestBidReceived != null)) {
                object[] results = ((object[])(state));
                this.RequestBidReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnReqeustContractReceived(object state) {
            if ((this.ReqeustContractReceived != null)) {
                object[] results = ((object[])(state));
                this.ReqeustContractReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnRequestPlayReceived(object state) {
            if ((this.RequestPlayReceived != null)) {
                object[] results = ((object[])(state));
                this.RequestPlayReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnRecieveStatusCardsReceived(object state) {
            if ((this.RecieveStatusCardsReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveStatusCardsReceived(this, new RecieveStatusCardsReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRecieveErrorMessageReceived(object state) {
            if ((this.RecieveErrorMessageReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveErrorMessageReceived(this, new RecieveErrorMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRecieveGameOverReceived(object state) {
            if ((this.RecieveGameOverReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveGameOverReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnRecieveChatMessageReceived(object state) {
            if ((this.RecieveChatMessageReceived != null)) {
                object[] results = ((object[])(state));
                this.RecieveChatMessageReceived(this, new RecieveChatMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && ((((((((((((this.RecieveRoundStatusUpdateReceived != null) 
                        || (this.RecieveGameStatusUpdateReceived != null)) 
                        || (this.RecieveCardsReceived != null)) 
                        || (this.RecieveExchangedCardsReceived != null)) 
                        || (this.RequestExchangeCardsReceived != null)) 
                        || (this.RequestBidReceived != null)) 
                        || (this.ReqeustContractReceived != null)) 
                        || (this.RequestPlayReceived != null)) 
                        || (this.RecieveStatusCardsReceived != null)) 
                        || (this.RecieveErrorMessageReceived != null)) 
                        || (this.RecieveGameOverReceived != null)) 
                        || (this.RecieveChatMessageReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TestClient.GameService.IPlayerService CreateChannel() {
            return new PlayerServiceClientChannel(this);
        }
        
        private class PlayerServiceClientCallback : object, IPlayerServiceCallback {
            
            private PlayerServiceClient proxy;
            
            public void Initialize(PlayerServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void RecieveRoundStatusUpdate(TestClient.GameService.RoundStatus status) {
                this.proxy.OnRecieveRoundStatusUpdateReceived(new object[] {
                            status});
            }
            
            public void RecieveGameStatusUpdate(TestClient.GameService.GameStatus status) {
                this.proxy.OnRecieveGameStatusUpdateReceived(new object[] {
                            status});
            }
            
            public void RecieveCards(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards) {
                this.proxy.OnRecieveCardsReceived(new object[] {
                            cards});
            }
            
            public void RecieveExchangedCards(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards) {
                this.proxy.OnRecieveExchangedCardsReceived(new object[] {
                            cards});
            }
            
            public void RequestExchangeCards() {
                this.proxy.OnRequestExchangeCardsReceived(new object[0]);
            }
            
            public void RequestBid() {
                this.proxy.OnRequestBidReceived(new object[0]);
            }
            
            public void ReqeustContract() {
                this.proxy.OnReqeustContractReceived(new object[0]);
            }
            
            public void RequestPlay() {
                this.proxy.OnRequestPlayReceived(new object[0]);
            }
            
            public void RecieveStatusCards(TestClient.GameService.RoundStatus status, System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card>> allCards) {
                this.proxy.OnRecieveStatusCardsReceived(new object[] {
                            status,
                            allCards});
            }
            
            public void RecieveErrorMessage(string msg) {
                this.proxy.OnRecieveErrorMessageReceived(new object[] {
                            msg});
            }
            
            public void RecieveGameOver() {
                this.proxy.OnRecieveGameOverReceived(new object[0]);
            }
            
            public void RecieveChatMessage(TestClient.GameService.PlayerSeat sender, string msg) {
                this.proxy.OnRecieveChatMessageReceived(new object[] {
                            sender,
                            msg});
            }
        }
        
        private class PlayerServiceClientChannel : ChannelBase<TestClient.GameService.IPlayerService>, TestClient.GameService.IPlayerService {
            
            public PlayerServiceClientChannel(System.ServiceModel.DuplexClientBase<TestClient.GameService.IPlayerService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegister(string name, string game_name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = name;
                _args[1] = game_name;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Register", _args, result);
            }
            
            public System.IAsyncResult BeginStartGame(string name, int number_Of_AIPlayers, System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, string game_name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = name;
                _args[1] = number_Of_AIPlayers;
                _args[2] = player_AI;
                _args[3] = num_of_rounds;
                _args[4] = milliseconds_between_turns;
                _args[5] = game_name;
                System.IAsyncResult _result = base.BeginInvoke("StartGame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartGame", _args, result);
            }
            
            public System.IAsyncResult BeginStartGameView(System.Collections.ObjectModel.ObservableCollection<string> player_AI, int num_of_rounds, int milliseconds_between_turns, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = player_AI;
                _args[1] = num_of_rounds;
                _args[2] = milliseconds_between_turns;
                System.IAsyncResult _result = base.BeginInvoke("StartGameView", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartGameView(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartGameView", _args, result);
            }
            
            public System.IAsyncResult BeginRequestUpdate(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RequestUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRequestUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RequestUpdate", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchCards(System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cards;
                System.IAsyncResult _result = base.BeginInvoke("SwitchCards", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchCards(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchCards", _args, result);
            }
            
            public System.IAsyncResult BeginMakeBid(System.Nullable<TestClient.GameService.Bid> bid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = bid;
                System.IAsyncResult _result = base.BeginInvoke("MakeBid", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMakeBid(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MakeBid", _args, result);
            }
            
            public System.IAsyncResult BeginMakeContract(int amount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = amount;
                System.IAsyncResult _result = base.BeginInvoke("MakeContract", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMakeContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MakeContract", _args, result);
            }
            
            public System.IAsyncResult BeginPlayCard(TestClient.GameService.Card play, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = play;
                System.IAsyncResult _result = base.BeginInvoke("PlayCard", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPlayCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PlayCard", _args, result);
            }
            
            public System.IAsyncResult BeginGetPlayerPlugIns(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetPlayerPlugIns", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin> EndGetPlayerPlugIns(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin> _result = ((System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.PlayerPlugin>)(base.EndInvoke("GetPlayerPlugIns", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFinishGame(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FinishGame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndFinishGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("FinishGame", _args, result);
            }
            
            public System.IAsyncResult BeginSendChatMessage(string msg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = msg;
                System.IAsyncResult _result = base.BeginInvoke("SendChatMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendChatMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendChatMessage", _args, result);
            }
        }
    }
    
    public class RecieveRoundStatusUpdateReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveRoundStatusUpdateReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TestClient.GameService.RoundStatus status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TestClient.GameService.RoundStatus)(this.results[0]));
            }
        }
    }
    
    public class RecieveGameStatusUpdateReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveGameStatusUpdateReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TestClient.GameService.GameStatus status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TestClient.GameService.GameStatus)(this.results[0]));
            }
        }
    }
    
    public class RecieveCardsReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveCardsReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card>)(this.results[0]));
            }
        }
    }
    
    public class RecieveExchangedCardsReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveExchangedCardsReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card> cards {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card>)(this.results[0]));
            }
        }
    }
    
    public class RecieveStatusCardsReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveStatusCardsReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TestClient.GameService.RoundStatus status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TestClient.GameService.RoundStatus)(this.results[0]));
            }
        }
        
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card>> allCards {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<TestClient.GameService.Card>>)(this.results[1]));
            }
        }
    }
    
    public class RecieveErrorMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveErrorMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string msg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class RecieveChatMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveChatMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TestClient.GameService.PlayerSeat sender {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TestClient.GameService.PlayerSeat)(this.results[0]));
            }
        }
        
        public string msg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}
